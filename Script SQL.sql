-- criando database:
DROP DATABASE IF EXISTS DBFOODTRUCK;
CREATE DATABASE DBFOODTRUCK;
USE DBFOODTRUCK;

-- usuario para acessar o programa de relatório:
drop user 'relatorio'@'%';
create user 'relatorio'@'%' identified with mysql_native_password by 'admin';
grant all on DBFOODTRUCK.* to 'relatorio'@'%';
flush privileges;

-- tabelas de configuração:
CREATE TABLE TIPOUSUARIO (
IDTIPOUSUARIO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
DESCRICAO VARCHAR(255)
);

CREATE TABLE TIPOPRODUTO (
IDTIPOPRODUTO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
DESCRICAO VARCHAR(255)
);

CREATE TABLE SITUACAOENTREGA (
IDSITUACAOENTREGA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
DESCRICAO VARCHAR(255)
, ORDEM INT
);

CREATE TABLE SITUACAOENTREGALOG (
	IDSITUACAOENTREGALOG INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	IDENTREGA INT,
	IDSITUACAOENTREGA_ANTIGO INT,
    IDSITUACAOENTREGA_NOVO INT,
    DATA_MODIFICACAO DATETIME
);
    

-- tabelas reais
CREATE TABLE ENDERECO (
IDENDERECO INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
CEP VARCHAR(9),
RUA VARCHAR (100),
NUMERO VARCHAR (5),
COMPLEMENTO VARCHAR(20) 
);

CREATE TABLE USUARIO (
IDUSUARIO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
IDTIPOUSUARIO INT, FOREIGN KEY (IDTIPOUSUARIO) REFERENCES TIPOUSUARIO (IDTIPOUSUARIO),
IDENDERECO INT, FOREIGN KEY (IDENDERECO) REFERENCES ENDERECO (IDENDERECO),
NOME VARCHAR(255),
CPF VARCHAR(11) UNIQUE,
EMAIL VARCHAR(255),
TELEFONE VARCHAR(14),
DATACADASTRO DATETIME,
DATAEXPIRACAO DATETIME,
LOGIN VARCHAR(255),
SENHA VARCHAR(255)
);

CREATE TABLE PRODUTO (
IDPRODUTO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
IDTIPOPRODUTO INT, FOREIGN KEY (IDTIPOPRODUTO) REFERENCES TIPOPRODUTO (IDTIPOPRODUTO),
NOME VARCHAR(255) UNIQUE,
PRECO NUMERIC(10,2),
DATACADASTRO DATETIME,
DATAEXCLUSAO DATETIME
);

CREATE TABLE VENDA (
IDVENDA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
IDUSUARIO INT, FOREIGN KEY (IDUSUARIO) REFERENCES USUARIO (IDUSUARIO),
NUMEROPEDIDO INT,
DATAVENDA DATETIME,
DATACANCELAMENTO DATETIME,
FLAGENTREGA BIT, -- para dizer se tem ou não entrega
TAXAENTREGA NUMERIC(10,2)
);

CREATE TABLE ITEMVENDA (
IDITEMVENDA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
IDVENDA INT, FOREIGN KEY (IDVENDA) REFERENCES VENDA (IDVENDA),
IDPRODUTO INT, FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO (IDPRODUTO),
QUANTIDADE INT 
);

CREATE TABLE ENTREGA (
IDENTREGA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
IDVENDA INT, FOREIGN KEY (IDVENDA) REFERENCES VENDA (IDVENDA), -- AQUI JÁ TEM O ID DO CLIENTE E DO ENDEREÇO DELE
IDENTREGADOR INT, FOREIGN KEY (IDENTREGADOR) REFERENCES USUARIO (IDUSUARIO),
IDSITUACAOENTREGA INT, FOREIGN KEY (IDSITUACAOENTREGA) REFERENCES SITUACAOENTREGA (IDSITUACAOENTREGA),
DATAENTREGA DATETIME
);

-- TRIGGER: gerar número do pedido
DELIMITER $$
CREATE TRIGGER TR_VENDA_BI BEFORE INSERT ON VENDA FOR EACH ROW
BEGIN 
	-- BUSCANDO O ÚLTIMO PEDIDO
	DECLARE vULTIMOPEDIDO INT;
    IF (select count(idvenda) from venda) = 0 then
		-- SE NÃO HOUVER NENHUM PEDIDO, INICIE EM ZERO
		SET vULTIMOPEDIDO = 0;
    ELSE
		-- CASO HAJA ALGUM PEDIDO, PEGUE O ÚLTIMO NÚMERO
		SELECT IFNULL(NUMEROPEDIDO, 0) INTO vULTIMOPEDIDO FROM VENDA ORDER BY IDVENDA DESC LIMIT 1;
	END IF;
    
	-- SE O NUMERO PEDIDO NÃO FOR PASSADO POR PARÂMETRO (NULO), PREENCHA CONFORME AS REGRAS, SENÃO DEIXE COMO ESTÁ.
	IF NEW.NUMEROPEDIDO IS NULL THEN
		IF vULTIMOPEDIDO = 99 THEN SET NEW.NUMEROPEDIDO = 1; 
		ELSE SET NEW.NUMEROPEDIDO = vULTIMOPEDIDO+1;
		END IF;
	END IF;
END $$

-- TRIGGER: salvar log de ATUALIZAÇÃO de situação de entrega
CREATE TRIGGER TR_SITUACAOENTREGA_AU AFTER UPDATE ON ENTREGA FOR EACH ROW
BEGIN
	INSERT INTO SITUACAOENTREGALOG (IDENTREGA, IDSITUACAOENTREGA_ANTIGO, IDSITUACAOENTREGA_NOVO, DATA_MODIFICACAO) 
    VALUES (NEW.IDENTREGA, OLD.IDSITUACAOENTREGA, NEW.IDSITUACAOENTREGA, NOW());
END $$

-- TRIGGER: salvar log de INSERÇÃO de situação de entrega
CREATE TRIGGER TR_SITUACAOENTREGA_AI AFTER INSERT ON ENTREGA FOR EACH ROW
BEGIN
	INSERT INTO SITUACAOENTREGALOG (IDENTREGA, IDSITUACAOENTREGA_NOVO, DATA_MODIFICACAO) 
    VALUES (NEW.IDENTREGA, NEW.IDSITUACAOENTREGA, NOW());
END $$
DELIMITER ;


-- inserts de configuração
INSERT INTO TIPOUSUARIO (descricao) VALUES ('ADMINISTRADOR');
INSERT INTO TIPOUSUARIO (descricao) VALUES ('CLIENTE');
INSERT INTO TIPOUSUARIO (descricao) VALUES ('FUNCIONARIO');
INSERT INTO TIPOUSUARIO (descricao) VALUES ('ENTREGADOR');
INSERT INTO TIPOPRODUTO (descricao) VALUES ('COMIDA');
INSERT INTO TIPOPRODUTO (descricao) VALUES ('BEBIDA'); 
INSERT INTO TIPOPRODUTO (descricao) VALUES ('SOBREMESA');
INSERT INTO SITUACAOENTREGA (DESCRICAO, ORDEM) VALUES ('PEDIDO_REALIZADO', 1); -- id 1
INSERT INTO SITUACAOENTREGA (DESCRICAO, ORDEM) VALUES ('PREPARANDO_PEDIDO', 2); -- id 2
INSERT INTO SITUACAOENTREGA (DESCRICAO, ORDEM) VALUES ('EM_ROTA_DE_ENTREGA', 3); -- id 3
INSERT INTO SITUACAOENTREGA (DESCRICAO, ORDEM) VALUES ('PEDIDO_ENTREGUE', 4); -- id 4
INSERT INTO SITUACAOENTREGA (DESCRICAO, ORDEM) VALUES ('PEDIDO_CANCELADO', 8); -- id 5
INSERT INTO SITUACAOENTREGA (DESCRICAO, ORDEM) VALUES ('ENTREGA_CANCELADA', 9); -- id 6

-- inserts de usuários
INSERT INTO USUARIO (idtipousuario, nome, cpf, email, telefone, datacadastro, dataexpiracao, login, senha) 
VALUES (1, 'Eduardo Azzolin', '01234567890', 'eduardo@gmail.com', '91111-6666', '2022-10-01', null, 'edu', 'edu');
INSERT INTO USUARIO (idtipousuario, nome, cpf, email, telefone, datacadastro, dataexpiracao, login, senha) 
VALUES (2, 'Matheus C.', '09876543210', 'matheus@gmail.com', '91111-7777', '2022-10-01', null, 'cliente', 'cliente');
INSERT INTO USUARIO (idtipousuario, nome, cpf, email, telefone, datacadastro, dataexpiracao, login, senha) 
VALUES (3, 'Bruno F.', '09876453210', 'bruno@gmail.com', '91111-8888', '2022-10-01', null, 'func', 'func');
INSERT INTO USUARIO (idtipousuario, nome, cpf, email, telefone, datacadastro, dataexpiracao, login, senha) 
VALUES (4, 'Roberto E.', '09873456210', 'roberto@gmail.com', '91111-9999', '2022-10-01', null, 'entregador', 'entregador');
INSERT INTO USUARIO (idtipousuario, nome, cpf, email, telefone, datacadastro, dataexpiracao, login, senha) 
VALUES (4, 'Fernando E.', '09875634210', 'fernando@gmail.com', '92222-9999', '2022-10-01', null, 'entregador', 'entregador');

-- inserts de produtos
INSERT INTO PRODUTO (idtipoproduto, nome, preco, datacadastro, dataexclusao) VALUES (1, 'Pizza', 50.00, '2022-10-01', null);
INSERT INTO PRODUTO (idtipoproduto, nome, preco, datacadastro, dataexclusao) VALUES (2, 'Coca-Cola', 7.00, '2022-10-01', null);
INSERT INTO PRODUTO (idtipoproduto, nome, preco, datacadastro, dataexclusao) VALUES (3, 'Sorvete', 15.00, '2022-10-01', null);

-- inserts de vendas
INSERT INTO VENDA (idusuario, datavenda, datacancelamento, flagentrega, taxaentrega) VALUES (2, '2022-11-03', null, 0, null);
INSERT INTO VENDA (idusuario, datavenda, datacancelamento, flagentrega, taxaentrega) VALUES (2, '2022-11-04', null, 1, 10.00);
INSERT INTO VENDA (idusuario, datavenda, datacancelamento, flagentrega, taxaentrega) VALUES (2, '2022-11-28 14:20:00', '2022-11-28 14:30:00', 1, 14.25);
INSERT INTO VENDA (idusuario, datavenda, datacancelamento, flagentrega, taxaentrega) VALUES (2, '2022-11-29 15:30:00', '2022-11-29 15:45:00', 1, 5.80);


-- inserts de itens nas vendas
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (1, 1, 2); -- venda1
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (1, 2, 2); -- venda1
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (2, 1, 1); -- venda2
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (2, 2, 2); -- venda2
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (2, 3, 2); -- venda2
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (3, 1, 5); -- venda3
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (3, 2, 5); -- venda3
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (4, 2, 3); -- venda4
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (4, 3, 3); -- venda4
INSERT INTO ITEMVENDA (idvenda, idproduto, quantidade) VALUES (4, 1, 1); -- venda4

-- inserts de entrega
INSERT INTO ENTREGA (idvenda, identregador, idsituacaoentrega) VALUES (2, 4, 3); 
INSERT INTO ENTREGA (idvenda, identregador, idsituacaoentrega) VALUES (3, 5, 1); 
INSERT INTO ENTREGA (idvenda, identregador, idsituacaoentrega) VALUES (4, 4, 1); 

-- selects
SELECT * FROM TIPOUSUARIO;
SELECT * FROM USUARIO;
SELECT * FROM endereco;
SELECT * FROM TIPOPRODUTO;
SELECT * FROM PRODUTO;
SELECT * FROM VENDA order by idvenda desc;
SELECT * FROM ITEMVENDA;
SELECT * FROM ENTREGA;
SELECT * FROM SITUACAOENTREGA;
SELECT * FROM SITUACAOENTREGALOG;  
SELECT * FROM ENDERECO WHERE IDENDERECO = (SELECT IDENDERECO FROM USUARIO WHERE IDUSUARIO = 1);
SELECT * FROM VW_ENTREGA_COMPLETA;
-- SELECT * FROM VW_HISTORICO_VENDA;
-- SELECT * FROM VW_RESUMO_VENDA;



-- VIEW: resumo dos produtos da venda e seus valores e quantidades
CREATE OR REPLACE VIEW VW_RESUMO_VENDA AS
	SELECT 
		ITEMVENDA.IDVENDA,
		PRODUTO.IDPRODUTO,
		PRODUTO.NOME,
		PRODUTO.PRECO AS PRECO_UNIT,
		SUM(ITEMVENDA.QUANTIDADE) AS QUANTIDADE,
		(PRODUTO.PRECO * SUM(ITEMVENDA.QUANTIDADE)) AS TOTAL
	FROM PRODUTO
	LEFT JOIN ITEMVENDA ON
	ITEMVENDA.IDPRODUTO = PRODUTO.IDPRODUTO
	GROUP BY ITEMVENDA.IDVENDA, PRODUTO.IDPRODUTO;
    
-- VIEW: historico das vendas com valor total 
CREATE OR REPLACE VIEW VW_HISTORICO_VENDA AS
	SELECT 
		VENDA.IDVENDA,
		VENDA.NUMEROPEDIDO,
		USUARIO.NOME AS CLIENTE,
		USUARIO.IDUSUARIO,
		(SUM(ITEMVENDA.QUANTIDADE * PRODUTO.PRECO) + IFNULL(VENDA.TAXAENTREGA, 0)) AS VALOR_TOTAL,
        VENDA.DATAVENDA,
        ifnull(SITUACAOENTREGA.DESCRICAO, 'SEM ENTREGA') AS ENTREGA
	FROM VENDA
	LEFT JOIN ITEMVENDA ON
	ITEMVENDA.IDVENDA = VENDA.IDVENDA
	LEFT JOIN USUARIO ON
	USUARIO.IDUSUARIO = VENDA.IDUSUARIO
	LEFT JOIN PRODUTO ON
	PRODUTO.IDPRODUTO = ITEMVENDA.IDPRODUTO
    LEFT JOIN ENTREGA ON
    ENTREGA.IDVENDA = VENDA.IDVENDA
    LEFT JOIN SITUACAOENTREGA ON
    ENTREGA.IDSITUACAOENTREGA = SITUACAOENTREGA.IDSITUACAOENTREGA
	GROUP BY IDVENDA;
    
            
-- VIEW: informações completas sobre a entrega
CREATE OR REPLACE VIEW VW_ENTREGA_COMPLETA AS
	SELECT 
		ENTREGA.IDENTREGA,
		ENTREGA.IDVENDA,
		VENDA.IDUSUARIO AS IDCLIENTE,
		(SELECT NOME FROM USUARIO WHERE IDUSUARIO = VENDA.IDUSUARIO) AS CLIENTE,
		(SELECT TELEFONE FROM USUARIO WHERE IDUSUARIO = VENDA.IDUSUARIO) AS TEL_CLIENTE,
		ENTREGA.IDENTREGADOR,
		USUARIO.NOME AS ENTREGADOR,
		ENTREGA.IDSITUACAOENTREGA,
		SITUACAOENTREGA.DESCRICAO AS SITUACAO_ENTREGA,
		ENTREGA.DATAENTREGA
	FROM ENTREGA
	LEFT JOIN USUARIO ON
		USUARIO.IDUSUARIO = ENTREGA.IDENTREGADOR
	LEFT JOIN SITUACAOENTREGA ON
		SITUACAOENTREGA.IDSITUACAOENTREGA = ENTREGA.IDSITUACAOENTREGA
	LEFT JOIN VENDA ON
		ENTREGA.IDVENDA = VENDA.IDVENDA;
        
        

-- RELATORIOS:
-- O1: 
SELECT
	VENDA.IDVENDA,
	DATE_FORMAT(VENDA.DATAVENDA, '%d/%m/%Y') AS DATAVENDA,
	USUARIO.NOME AS NOMECLIENTE,
	IF(VENDA.DATACANCELAMENTO IS NULL, 'VENDA CONFIRMADA', 'VENDA CANCELADA' ) AS SITUACAOVENDA,
	IFNULL(SITUACAOENTREGA.DESCRICAO, 'SEM_ENTREGA') AS SITUACAOENTREGA,
	PRODUTO.IDPRODUTO, 
	PRODUTO.NOME AS PRODUTO,
	SUM(ITEMVENDA.QUANTIDADE) AS QUANTIDADE,
	SUM(PRODUTO.PRECO) AS PRECO,
    SUM(PRODUTO.PRECO * ITEMVENDA.QUANTIDADE) AS VALOR_TOTAL,
    ifnull(VENDA.TAXAENTREGA, 0) AS TAXAENTREGAPEDIDO
FROM VENDA
LEFT JOIN USUARIO ON 
	USUARIO.IDUSUARIO = VENDA.IDUSUARIO
LEFT JOIN ENTREGA ON
	VENDA.IDVENDA = ENTREGA.IDVENDA
LEFT JOIN SITUACAOENTREGA ON 
	SITUACAOENTREGA.IDSITUACAOENTREGA = ENTREGA.IDSITUACAOENTREGA
LEFT JOIN ITEMVENDA ON
	VENDA.IDVENDA = ITEMVENDA.IDVENDA
LEFT JOIN PRODUTO ON
	ITEMVENDA.IDPRODUTO = PRODUTO.IDPRODUTO
GROUP BY
	VENDA.IDVENDA,
	VENDA.DATAVENDA,
	USUARIO.NOME,
	SITUACAOENTREGA.DESCRICAO,
	PRODUTO.IDPRODUTO, 
	PRODUTO.NOME
ORDER BY VENDA.IDVENDA DESC;
        
-- RELATORIO 02:
-- INFORMAÇÕES GERAIS:
SELECT
	VENDA.IDVENDA,
	DATE_FORMAT(VENDA.DATAVENDA, '%d/%m/%Y') AS DATAVENDA,
	USUARIO.NOME AS NOMECLIENTE ,
    USUARIO.TELEFONE AS TELEFONECLIENTE,
    ENTREGADOR.NOME AS NOMEENTREGADOR,
    ENTREGADOR.TELEFONE AS TELEFONEENTREGADOR,
    MAX(SITUACAOENTREGA.ORDEM) AS ORDEM
FROM
	VENDA
LEFT JOIN USUARIO ON
	USUARIO.IDUSUARIO = VENDA.IDUSUARIO
LEFT JOIN ENTREGA ON
	ENTREGA.IDVENDA = VENDA.IDVENDA
LEFT JOIN SITUACAOENTREGALOG ON
	SITUACAOENTREGALOG.IDENTREGA = ENTREGA.IDENTREGA
LEFT JOIN SITUACAOENTREGA ON
	SITUACAOENTREGA.IDSITUACAOENTREGA = SITUACAOENTREGALOG.IDSITUACAOENTREGA_NOVO
LEFT JOIN USUARIO AS ENTREGADOR ON
	ENTREGADOR.IDUSUARIO = ENTREGA.IDENTREGADOR
-- WHERE 
GROUP BY
	VENDA.IDVENDA,
	VENDA.DATAVENDA,
	USUARIO.NOME,
    USUARIO.TELEFONE,
    ENTREGADOR.NOME,
    ENTREGADOR.TELEFONE
ORDER BY 
	SITUACAOENTREGA.ORDEM, venda.idvenda desc limit 10;
    
        
-- LISTA DE PRODUTOS:
SELECT 
	PRODUTO.IDPRODUTO
	, PRODUTO.NOME
	, ITEMVENDA.QUANTIDADE
FROM
	ITEMVENDA 
	INNER JOIN PRODUTO ON
	PRODUTO.IDPRODUTO = ITEMVENDA.IDPRODUTO
-- WHERE IDVENDA = 
ORDER BY 
	PRODUTO.IDPRODUTO;
    
    
-- HISTORICO ENTREGA:
SELECT 
	SITUACAOENTREGALOG.DATA_MODIFICACAO AS DATAMOVIMENTACAO,
	SITUACAOENTREGA.DESCRICAO AS SITUACAO
FROM VENDA
LEFT JOIN ENTREGA ON
	ENTREGA.IDVENDA = VENDA.IDVENDA
LEFT JOIN SITUACAOENTREGALOG ON
	SITUACAOENTREGALOG.IDENTREGA = ENTREGA.IDENTREGA
LEFT JOIN SITUACAOENTREGA ON
	SITUACAOENTREGA.IDSITUACAOENTREGA = SITUACAOENTREGALOG.IDSITUACAOENTREGA_NOVO
	-- WHERE VENDA.IDVENDA
ORDER BY 
	SITUACAOENTREGA.ORDEM;
        
-- 03:
SELECT
	VENDA.IDVENDA,
	VENDA.NUMEROPEDIDO AS PEDIDO,
    ENTREGA.IDSITUACAOENTREGA,
	USUARIO.NOME AS CLIENTE,
    USUARIO.TELEFONE,
    ENTREGADOR.NOME AS ENTREGADOR,
    ENDERECO.CEP,
    ENDERECO.RUA,
    ENDERECO.NUMERO,
    ENDERECO.COMPLEMENTO,
    VENDA.TAXAENTREGA,
    (SELECT VALOR_TOTAL FROM VW_HISTORICO_VENDA WHERE IDVENDA = VENDA.IDVENDA) AS TOTALPRODUTOS
FROM ENTREGA
LEFT JOIN VENDA ON
	ENTREGA.IDVENDA = VENDA.IDVENDA
LEFT JOIN USUARIO ON
	VENDA.IDUSUARIO = USUARIO.IDUSUARIO
LEFT JOIN USUARIO AS ENTREGADOR ON
	ENTREGA.IDENTREGADOR = ENTREGADOR.IDUSUARIO
LEFT JOIN ENDERECO ON
	USUARIO.IDENDERECO = ENDERECO.IDENDERECO
WHERE ENTREGA.IDSITUACAOENTREGA <= 2 && VENDA.DATACANCELAMENTO IS NULL;
        
